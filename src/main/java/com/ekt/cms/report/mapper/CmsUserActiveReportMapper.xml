<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ekt.cms.report.dao.CmsUserActiveReportMapper">
	
	<resultMap id="UserActiveReportMap" type="com.ekt.cms.report.entity.UserActiveReport">
				<result column="id" property="id" jdbcType="INTEGER" />	
				<result column="date" property="date" jdbcType="TIMESTAMP" />	
				<result column="user_count" property="userCount" jdbcType="INTEGER" />	
				<result column="increase_user_count" property="increaseUserCount" jdbcType="INTEGER" />	
				<result column="login_user_count" property="loginUserCount" jdbcType="INTEGER" />	
				<result column="login_times" property="loginTimes" jdbcType="INTEGER" />	
				<result column="web_login_times" property="webLoginTimes" jdbcType="INTEGER" />	
				<result column="app_login_times" property="appLoginTimes" jdbcType="INTEGER" />	
				<result column="pay_user_count" property="payUserCount" jdbcType="INTEGER" />	
				<result column="pay_times" property="payTimes" jdbcType="INTEGER" />	
				<result column="video_use_user_count" property="videoUseUserCount" jdbcType="INTEGER" />	
				<result column="video_use_times" property="videoUseTimes" jdbcType="INTEGER" />	
				<result column="exercise_use_user_count" property="exerciseUseUserCount" jdbcType="INTEGER" />	
				<result column="news_use_user_count" property="newsUseUserCount" jdbcType="INTEGER" />	
				<result column="message_use_user_count" property="messageUseUserCount" jdbcType="INTEGER"/>	
				<result column="dayOrMonthOrYear" property="dayOrMonthOrYear" jdbcType="INTEGER"/>	
				
	</resultMap>
		
	<select id="getList" resultMap="UserActiveReportMap" parameterType="com.ekt.cms.report.entity.UserActiveReportValidBean">
	
	<if test="uarvb.dayOrMonthOrYear>1">	
SELECT 
	(SELECT COUNT(1) FROM api_user u WHERE u.register_date &lt; CONCAT(last_day(c.date),' 00:00:00') 
	 AND( u.is_real=0 OR u.is_real is NULL)) AS user_count
	,c.*
 FROM(
		SELECT 
			CONCAT(SUBSTR(a1.date FROM 1 FOR 7),'-01') AS date,
			a1.dayOrMonthOrYear,
			SUM(a1.increase_user_count)AS increase_user_count,
			SUM(a1.login_user_count)AS login_user_count,
			SUM(a1.login_times)AS login_times,
			SUM(a1.web_login_times)AS web_login_times,
			SUM(a1.app_login_times)AS app_login_times,
			SUM(a1.pay_user_count)AS pay_user_count,
			SUM(a1.pay_times)AS pay_times,
			SUM(a1.video_use_user_count)AS video_use_user_count,
			SUM(a1.video_use_times)AS video_use_times,
			SUM(a1.exercise_use_user_count)AS exercise_use_user_count,
			SUM(a1.news_use_user_count)AS news_use_user_count,
			SUM(a1.message_use_user_count)AS message_use_user_count	
		 FROM(
	</if>		
	
			SELECT 
				(#{uarvb.dayOrMonthOrYear})as dayOrMonthOrYear,
				DATE(CONCAT(SUBSTR(a.date FROM 1 FOR 7),'-00')) AS month,
				a.* 	
			 FROM(
				SELECT  
					(SELECT COUNT(1)+1 FROM api_user_active_report )AS id,
					a.* ,
					(SELECT COUNT(DISTINCT r.user_id) FROM api_user_login_record r LEFT JOIN api_user u on r.user_id=u.id WHERE r.create_time &gt; CURDATE() AND( u.is_real=0 OR is_real is NULL))AS login_user_count,

					(SELECT COUNT(1) FROM api_user_login_record r LEFT JOIN api_user u ON r.user_id = u.id WHERE r.create_time &gt; CURDATE() AND( u.is_real=0 OR u.is_real is NULL))AS login_times,

					(SELECT COUNT(1) FROM api_user_login_record r INNER JOIN cms_dictionary d ON r.login_type = d.id LEFT  JOIN api_user u on u.id=r.user_id WHERE	r.create_time &gt; CURDATE() AND d.image_url = 1 AND( u.is_real=0 OR u.is_real is NULL))AS web_login_times,

					(SELECT COUNT(1) FROM api_user_login_record r INNER JOIN cms_dictionary d ON r.login_type = d.id LEFT  JOIN api_user u on u.id=r.user_id WHERE	r.create_time &gt; CURDATE() AND d.image_url = 2 AND( u.is_real=0 OR u.is_real is NULL))AS app_login_times,

			 		(	SELECT COUNT(DISTINCT o.pay_user_id)FROM api_record_orders o 	LEFT JOIN api_user u on o.user_id=o.pay_user_id	WHERE o.trade_status = 1 AND o.trade_time &gt; CURDATE() AND o.trade_type &lt;&gt; 3 AND( u.is_real=0 OR is_real is NULL))AS pay_user_count,

					(SELECT	COUNT(1) FROM	api_record_orders o LEFT JOIN api_user u on o.pay_user_id=u.id WHERE o.trade_status = 1 AND o.trade_time &gt; CURDATE() AND o.trade_type &lt;&gt; 3 AND( u.is_real=0 OR is_real is NULL) )AS pay_times,

					(SELECT COUNT(DISTINCT d.user_id) FROM api_video_play_detail d INNER JOIN api_user u on d.user_id=u.id WHERE	d.create_time &gt; CURDATE() AND( u.is_real=0 OR is_real is NULL))AS video_use_user_count,
				
					(SELECT COUNT(1) FROM api_video_play_detail d INNER JOIN api_user u on d.user_id=u.id WHERE  d.create_time &gt; CURDATE() AND( u.is_real=0 OR is_real is NULL))AS video_use_times,

					(SELECT COUNT(DISTINCT d.user_id) FROM api_exercise_detail d INNER JOIN api_user u on d.user_id=u.id WHERE d.commit_time IS NOT NULL AND d.commit_time &gt; CURDATE() AND( u.is_real=0 OR is_real is NULL))AS exercise_use_user_count,

					(SELECT COUNT(DISTINCT g.user_id) FROM api_group_news g INNER JOIN api_user u on g.user_id=u.id WHERE g.create_time &gt; CURDATE() AND( u.is_real=0 OR is_real is NULL))AS news_use_user_count,
					
					(SELECT COUNT(DISTINCT m.from_user_id) FROM api_message m INNER JOIN api_user u ON u.id=m.from_user_id WHERE create_time &gt; CURDATE() AND( u.is_real=0 OR is_real is NULL))AS message_use_user_count,
					(SYSDATE())AS create_time
			FROM(
						SELECT 
							CURDATE()AS date,
							COUNT((is_real=0 OR is_real is NULL) OR NULL)AS user_count,
							COUNT((u.register_date&gt; CURDATE() AND (is_real=0 OR is_real is NULL)) OR NULL)AS increase_user_count
						FROM api_user u
											)AS a 
			
			 UNION ALL SELECT * FROM api_user_active_report
			 
			)AS a ORDER BY a.date DESC
			<if test="uarvb.dayOrMonthOrYear>1">
				)AS a1
				GROUP BY a1.month
				ORDER BY a1.month DESC
				)AS c
			</if>
	
	
	
	</select>
	
	
</mapper>