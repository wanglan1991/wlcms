<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
	    http://www.springframework.org/schema/context/spring-context.xsd
	    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
	    http://www.springframework.org/schema/cache
	    http://www.springframework.org/schema/cache/spring-cache.xsd">

	<!--加载属性文件 -->
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<array>
				<value>classpath:/conf/config.properties</value>
			</array>
		</property>
	</bean>

	<bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">
		<property name="config">
			<bean class="com.google.code.kaptcha.util.Config">
				<constructor-arg>
					<props>
						<prop key="kaptcha.border">yes</prop>
						<prop key="kaptcha.border.color">20,92,205</prop>
						<prop key="kaptcha.textproducer.font.color">20,92,205</prop>
						<prop key="kaptcha.image.width">125</prop>
						<prop key="kaptcha.image.height">45</prop>
						<prop key="kaptcha.textproducer.font.size">35</prop>
						<prop key="kaptcha.session.key">code</prop>
						<prop key="kaptcha.textproducer.char.length">4</prop>
						<prop key="kaptcha.textproducer.font.names">宋体,楷体,微软雅黑</prop>
					</props>
				</constructor-arg>
			</bean>
		</property>
	</bean>
	<!--注解扫描的包 -->
	<context:component-scan base-package="com.larva.*,com.mini.core.cfg" />
	<!-- 启动对@AspectJ注解的支持 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />

	<!--方案1.缓存管理 Redis -->
	<!-- <bean id="cache" class="com.larva.shiro.cache.WTCache"> <property name="redisManager" 
		ref="redisManager"/> </bean> <bean id="cacheManager" class="com.larva.shiro.cache.WTCacheManager"> 
		<property name="cache" ref="cache"/> </bean> -->

	<!--方案2.缓存管理 EhCache -->
	<bean id="ehCacheManager"
		class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="classpath:${ehcache.configFile}" />
	</bean>
	<bean id="ehCache" class="org.springframework.cache.ehcache.EhCacheFactoryBean">
		<property name="cacheManager" ref="ehCacheManager" />
	</bean>
	<bean id="cache" class="org.apache.shiro.cache.ehcache.EhCache">
		<constructor-arg ref="ehCache" />
	</bean>
	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManager" ref="ehCacheManager" />
	</bean>


	<import resource="classpath:/conf/spring-mybatis.xml" />
	<import resource="classpath:/conf/spring-shiro.xml" />
</beans>